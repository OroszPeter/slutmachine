document.addEventListener("DOMContentLoaded", () => {
  let score = document.getElementById("score");
  let currentWin = document.getElementById("currentwin");
  let API_Url = "https://slotmachine.tryasp.net/";
  let token = null;

  const loginForm = document.getElementById("login-form");
  const loginContainer = document.getElementById("login-container");
  const appContainer = document.getElementById("app");

  const items = [
    "7Ô∏è‚É£",
    "‚ùå",
    "üçì",
    "üçã",
    "üçâ",
    "üçí",
    "üíµ",
    "üçä",
    "üçé"
  ];

  const rewards = {
    "7Ô∏è‚É£": { 3: 10000 },
    "‚ùå": { 0: 0 },
    "üçì": { 1: 50, 2: 100, 3: 150 },
    "üçã": { 3: 1000 },
    "üçâ": { 3: 2000 },
    "üçí": { 2: 100, 3: 300 },
    "üíµ": { 3: 5000 },
    "üçä": { 2: 200, 3: 500 },
    "üçé": { 1: 50, 2: 100, 3: 150 }
  };

  const doors = document.querySelectorAll(".door");
  document.querySelector("#spinner").addEventListener("click", spin);

  // Bejelentkez√©si esem√©nykezel≈ë
  loginForm.addEventListener("submit", async (event) => {
    event.preventDefault();
    const username = document.getElementById("username").value;
    const password = document.getElementById("password").value;

    await loginOrRegister(username, password);

    if (token) {
      loginContainer.style.display = "none";  // Bejelentkez√©si ≈±rlap elrejt√©se
      appContainer.style.display = "flex";    // Alkalmaz√°s megjelen√≠t√©se
    }
  });

  // Bejelentkez√©si √©s regisztr√°ci√≥s logika
  async function loginOrRegister(username, password) {
    try {
      console.log("Bejelentkez√©s pr√≥b√°lkoz√°s...");
      const loginResponse = await fetch(`${API_Url}api/Users/login`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, password })
      });
  
      // Ellen≈ërizz√ºk, hogy a v√°lasz sikeres-e
      if (loginResponse.ok) {
        const contentType = loginResponse.headers.get("Content-Type");
  
        // Ha a v√°lasz JSON form√°tum√∫, akkor JSON-k√©nt dolgozzuk fel
        if (contentType && contentType.includes("application/json")) {
          const loginData = await loginResponse.json();
          token = loginData.token;
          localStorage.setItem("token", token);
          console.log("Bejelentkezve. Token:", token);
          await fetchUserData();
        } else {
          // Ha nem JSON v√°lasz √©rkezik, akkor sz√∂veges v√°laszt v√°runk
          const errorText = await loginResponse.text();
          console.log("Bejelentkez√©s nem siker√ºlt:", errorText);
  
          // Ha a v√°laszban szerepel a "A felhaszn√°l√≥ nem tal√°lhat√≥!" √ºzenet, akkor regisztr√°ci√≥t v√©gz√ºnk
          if (errorText === "A felhaszn√°l√≥ nem tal√°lhat√≥!") {
            console.log("Felhaszn√°l√≥ nem tal√°lhat√≥, regisztr√°l√°s...");
            const registerResponse = await fetch(`${API_Url}api/Users/register`, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ username, password })
            });
  
            // Ha a regisztr√°ci√≥ sikeres, akkor √∫jra pr√≥b√°lkozunk a bejelentkez√©ssel
            if (registerResponse.ok) {
              console.log("Regisztr√°ci√≥ sikeres. √öjra bejelentkez√©s...");
              await loginOrRegister(username, password); // Regisztr√°ci√≥ ut√°n √∫jra bejelentkez√©s
            } else {
              console.log("Regisztr√°ci√≥ sikertelen!");
              alert("Regisztr√°ci√≥ sikertelen!");
            }
          } else {
            alert("Bejelentkez√©s sikertelen!");
          }
        }
      } else {
        console.log("Bejelentkez√©s nem siker√ºlt: ", loginResponse.statusText);
        alert("Bejelentkez√©s nem siker√ºlt!");
      }
    } catch (error) {
      console.error("Hiba t√∂rt√©nt a bejelentkez√©s sor√°n:", error);
    }
  }
  
  
  

  // Felhaszn√°l√≥i adatok lek√©r√©se
  async function fetchUserData() {
    try {
      console.log("Felhaszn√°l√≥i adatok lek√©r√©se...");
      const response = await fetch(`${API_Url}api/Users/me`, {
        headers: { Authorization: `Bearer ${token}` }
      });

      if (response.ok) {
        const userData = await response.json();
        console.log("Felhaszn√°l√≥i adatok:", userData);
        score.textContent = `${userData.userName}: ${userData.score}`;
      } else {
        console.error("Hiba t√∂rt√©nt a felhaszn√°l√≥i adatok lek√©r√©sekor.");
      }
    } catch (error) {
      console.error("Hiba t√∂rt√©nt a felhaszn√°l√≥i adatok lek√©r√©sekor:", error);
    }
  }

  // Pontok friss√≠t√©se
  async function updateScore(amount) {
    try {
        console.log(`Pontok friss√≠t√©se: ${amount}`);

        // M√≥dos√≠tott URL query param√©terekkel
        const response = await fetch(`${API_Url}api/Users/update-score?amount=${amount}`, {
            method: "PUT",
            headers: {
                "Content-Type": "application/json",  // A t√∂bbi header marad
                Authorization: `Bearer ${token}`
            }
        });

        if (response.ok) {
            const updatedScore = await response.json();  // A v√°laszban kapott friss√≠tett pontsz√°m
            console.log("Friss√≠tett pontsz√°m:", updatedScore);

            // Friss√≠tj√ºk a frontend pontsz√°mot a v√°lasz alapj√°n
            score.textContent = `Petike: ${updatedScore}`;
        } else {
            console.error("Hiba t√∂rt√©nt a pontok friss√≠t√©sekor:", response.statusText);
        }
    } catch (error) {
        console.error("Hiba t√∂rt√©nt a pontok friss√≠t√©sekor:", error);
    }
}

  // J√°t√©k p√∂rget√©se
  async function spin() {
    if (!token) {
      alert("Jelentkezz be a j√°t√©k elind√≠t√°s√°hoz!");
      return;
    }

    console.log("P√∂rget√©s ind√≠t√°sa...");
    await updateScore(-50); // Levonjuk a p√∂rget√©s √°r√°t

    currentWin.textContent = 0;

    init(false, 1, 2);
    for (const door of doors) {
      const boxes = door.querySelector(".boxes");
      const duration = parseInt(boxes.style.transitionDuration);
      boxes.style.transform = "translateY(0)";
      await new Promise((resolve) => setTimeout(resolve, duration * 100));
    }

    const doorSymbols = Array.from(doors).map(door => {
      const boxes = door.querySelector(".boxes");
      return boxes.children[0].textContent;
    });
    console.log("Kiv√°lasztott szimb√≥lumok:", doorSymbols);
    const symbolCounts = countSymbols(doorSymbols);
    console.log("Szimb√≥lumok sz√°ml√°l√°sa:", symbolCounts);
    const totalReward = calculateTotalReward(symbolCounts);
    console.log("Kisz√°m√≠tott nyerem√©ny:", totalReward);

    setTimeout(() => {
      currentWin.textContent = totalReward;
    }, 1500);

    setTimeout(async () => {
      await updateScore(totalReward); // Friss√≠tj√ºk a pontokat
    }, 1500);
  }

  function countSymbols(symbols) {
    const symbolCounts = {};
    symbols.forEach(symbol => {
      symbolCounts[symbol] = (symbolCounts[symbol] || 0) + 1;
    });
    return symbolCounts;
  }

  function calculateTotalReward(symbolCounts) {
    let totalReward = 0;
    for (const symbol in symbolCounts) {
      const count = symbolCounts[symbol];
      if (rewards[symbol] && rewards[symbol][count]) {
        totalReward += rewards[symbol][count];
      }
    }
    return totalReward;
  }

  function init(firstInit = true, groups = 1, duration = 1) {
    for (const door of doors) {
      if (firstInit) {
        door.dataset.spinned = "0";
      } else if (door.dataset.spinned === "1") {
        return;
      }

      const boxes = door.querySelector(".boxes");
      const boxesClone = boxes.cloneNode(false);

      const pool = ["‚ùì"];
      if (!firstInit) {
        const arr = [];
        for (let n = 0; n < (groups > 0 ? groups : 1); n++) {
          arr.push(...items);
        }
        pool.push(...shuffle(arr));
      }

      for (let i = pool.length - 1; i >= 0; i--) {
        const box = document.createElement("div");
        box.classList.add("box");
        box.style.width = door.clientWidth + "px";
        box.style.height = door.clientHeight + "px";
        box.textContent = pool[i];
        boxesClone.appendChild(box);
      }
      boxesClone.style.transitionDuration = `${duration > 0 ? duration : 1}s`;
      boxesClone.style.transform = `translateY(-${
        door.clientHeight * (pool.length - 1)
      }px)`;
      door.replaceChild(boxesClone, boxes);
    }
  }

  function shuffle([...arr]) {
    let m = arr.length;
    while (m) {
      const i = Math.floor(Math.random() * m--);
      [arr[m], arr[i]] = [arr[i], arr[m]];
    }
    return arr;
  }

  init();
});
